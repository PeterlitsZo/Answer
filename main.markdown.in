**不保证题解的完全正确，如果有错误、或希望补充，请访问 【暂无】 修改、评论**

对于每一个测试样例，我们有上界 $R$ 和数据 $a_1,\, a_2,\, \ldots,\, a_{L}$。

### 筛法
使用筛法，我们可以在 $O(R + L)$ 的时间复杂度中完成操作（证明略）。但是明显时间复杂度度过大。

### 朴素分解质因数
**本来这个是过不去的，但是学长说不能出太难了，所以改了一下，这个应该能过得过去。**
**注意，因为 米勒罗宾+rho 算法只适用于 $S$ 值较小的大合数分解（因为它的常数太大了），所以更改了数据之后的，它的解只能用朴素的分解质因数的方法**

利用反证法我们可以知道，如果一个数 $N$ 有非平凡因子 $a$，那 $N$ 一定存在一个非平凡因子 $b \le \sqrt N$。

> 如果 $a \le \sqrt N$，那么令 $b = a$；如果 $a > \sqrt N$，因为 $a$ 为 $N$ 的因子，有存在：$ab = N$，其中 $b$ 即为所求：$b$ 为 $N$ 的因子，且 $b \le \sqrt N$。

我们可以分类讨论：如果 $N$ 不存在素因子 $a > \sqrt N$，那么我们可以在 $[2, \lfloor\sqrt N\rfloor]$ 的循环中解出所有的素因子；如果 $N$ 存在素因子 $a > \sqrt N$，那么可以证明（见下）满足这个条件的素因子 $a$ 有且只有一个，我们可以在循环之后判断。

> 如果有一个素因子 $a > \sqrt N$，那么 ${N \over a} \le \sqrt N$，因为素数整除性质，如果有另一个素因子 $b \mid N$，那么有 $b \mid a$，或者 $b \mid {N \over a}$。
>
> 如果 $b \mid a$，因为素数的性质，则 $a = b > \sqrt N$，有 $ab > N$，矛盾；如果 $b \mid {N \over a}$，那么有 $b \le {N \over a} < \sqrt N$。
>
> 综上，如果有一个素因子 $a > \sqrt N$，那么有且只有素因子 $a$ 满足 $a > \sqrt N$。

可以写代码如下：

``` C++
using ll = long long;
ll solve(ll N) {
    assert (N >= 2);
    ll result = 0;
    for (ll i = 2; i*i < N; i ++) {
        ll sub = 0;
        if (N % i == 0) {
            while(N % i == 0) N /= i, sub ++;
        }
        result += sub;
    }
    if (N > 1) {
        result ++;
    }
    return result;
}

/*
int main() {
    cout << solve(ll(1e9)+7);
}
*/
```

% 或者 python 代码
% ``` python
% def RR(num: int):
%     if num <= 1:
%         return 0
%     result = 0
%     for i in range(2, num):
%         if i**2 > num:
%             break
%         while num % i == 0:
%             num /= i
%             result += 1
%     if num != 1:
%         result += 1
%     return result
%
% def solve():
%     _, _ = [int(i) for i in input().split()]
%     nums = [int(i) for i in input().split()]
%     for i, v in enumerate(nums):
%         nums[i] = RR(v)
%     print(*nums)
%
% if __name__ == '__main__':
%     T = int(input())
%     for i in range(T):
%         solve()
% ```

分析可知，平均的时间复杂度为 $O(\sqrt N)$。如果每一个元素分布得比较平均，则一个测试样例的时间复杂度应为 $O(LR^{1 \over 2})$（需要一点微积分知识，证明略），时间复杂度还是有点大。

### 优化的朴素分解质因数
我们注意到 $[2, \lfloor\sqrt N\rfloor]$ 的循环中，只有 $i$ 为素数时才可能满足 $i \mid N$（证明略）。给定了上界 $R$，我们可以用欧拉筛在 $O(\sqrt R)$ 的时间复杂度中筛出所有的小于等于 $\sqrt N$ 的素数（证明略），根据素数分布定理，$\sqrt N$ 的素数数量约为 $\sqrt N \over \ln \sqrt N$。我们可以在 $O(\sqrt R + L{\mathrm{Ei}({3\ln R\over 2}) \over R})$ 的复杂度中完成（由 https://www.wolframalpha.com/ 给出，我也不大会），$\mathrm{Ei}(x)$ 可以近似地看作 $e^x$，那么有近似 $O(\sqrt R + LR^{1 \over 2})$。复杂度没有变化，但的确有明显的优化，常数比较小。

``` C++
using ll = long long;
template<typename T>
using vc = vector<T>;

list<ll> get_primes(ll R) {
    vc<bool> is_prime(R, true);
    list<ll> primes;
    for (ll i = 2; i <= R; i ++) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
        for (auto j = primes.begin(); j != primes.end(); i ++) {
            if (i * (*j) >= R) break;
            is_primes[i * (*j)] = false;
            if (i % *j == 0) break;
        }
    }
    return primes;
}

ll solve(ll N, vc<ll>& primes) {
    assert (N >= 2);
    ll result = 0;
    for (auto i = primes.begin(); (*i)*(*i) < N; i ++) {
        ll sub = 0;
        if (N % *i == 0) {
            while(N % i == 0) N /= *i, sub ++;
        }
        result += sub;
    }
    if (N > 1) {
        result ++;
    }
    return result;
}

/*
int main() {
    list<ll>&& primes = get_primes((ll)sqrt(1e9 + 7) + 10);
    cout << solve(ll(1e9)+7, primes);
}
*/
```

### rho 算法与 miller-rabin 素数检测
rho 算法是一种用来分解非平凡因子的随机算法，平均的时间复杂度较低。关于 rho 算法，可以查阅 https://www.cs.colorado.edu/~srirams/courses/csci2824-spr14/pollardsRho.html 或者 https://oi-wiki.org/math/pollard-rho/。

对于数 $N$，如果它不是素数的话，那我们可以使用 rho 算法将它分解为两个非平凡因子 $p$ 与 $q={N \over p}$，有：$S(N) = S(p) \times S(q)$。

出人意料的是，虽然目前没有一个能在多项式复杂度里分解质因数的算法（不过网上说量子计算机可以在多项式的时间复杂度里分解质因数？），但是却已经可以在多项式里证明一个数是否为素数。RSA 算法就是依托于两者难度不匹配的情况设计了一个简单的公私匙系统保证通话安全。这里使用易于实现的 miller-rabin 随机算法。miller-rabin 算法可以在 https://oi-wiki.org/math/prime/#miller-rabin 进行学习。它的时间复杂度大抵在 $O(ln n)$ 左右。

``` C++
using ll = long long;

ll fmul(ll a, ll b, ll N) {
    ll result = 0;
    while (b) {
        if (b & 1) {
            result = (result + a) % N;
        }
        b >>= 1, a = a * 2 % N;
    }
    return result;
}

ll fpow(ll b, ll p, ll N) {
    ll tmp = b, result = 1;
    while (p) {
        if (p & 1) {
            result = fmul(result, tmp, N);
        }
        p >>= 1, tmp = fmul(tmp, tmp, N);
    }
    return result;
}

const ll TEST_TIMES = 20;
bool is_prime(ll N) {
    if (N <= 1) return false;

    ll s=0, d = N-1;
    while (d % 2 == 0) d/=2, s++;
    for (int _ = 0; _ < TEST_TIMES; _ ++) {
        ll a = fmul(rand(), rand(), N-2) + 2;
        ll s_ = s, d_ = d;
        ll R = fpow(a, d_, N);
        while (s_ >= 1 && R != N-1 && R != 1) {
            R = fmul(R, R, N);
            s_ --;
        }
        if (s_ == 0) return false;
    }
    return true;
}
```

不过，这种素数检测方法的常数较高，在数较小的时候不比优化后的试除法，但是题目给的数据范围较大，所以应该使用这种素数检测方法，下面是仅供参考的优化试除法：
``` C++
using ll = long long;

bool is_prime(ll N) {
    if (N <= 1) return false;
    if (N <= 3) return true;
    for (ll i = 5; i * i <= N; i += 6) {
        if (N % i == 0 || N % (i + 2) == 0) {
            return false;
        }
    }
    return true;
}
```

接下来是 rho 算法，它期望得到一个合数，并且会返回一个非平凡因子，在函数体里用到了一些上面的函数，和 `gcd` 函数：
``` C++
ll gcd(ll a, ll b) {
    return a ? gcd(b % a, a) : b;
}
```

下面是 rho 算法的定义：
``` C++
ll rho(ll N) {
    while (true) {
        ll c = fmul(rand(), rand(), N-1) + 1;
        ll l = 2, cnt = 0;
        ll x = 0, y = 0;
        while (true) {
            x = (fmul(x, x, N) + c) % N;
            if (x == y) break;
            ll G = gcd(abs(x - y), N);
            if (G == N) break;
            if (G != 1) return G;
            if ((++cnt) == l) {
                y = x, cnt = 0, l *= 2;
            }
        }
    }
}
```

使用 `rho` 和检测素数的算法 `is_prime`，时间复杂度大约在 $O(N^{1\over 4})$。

### 参考代码
``` C++
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

ll fmul(ll a, ll b, ll N) {
    ll tmp = a, result = 0;
    while (b) {
        if (b & 1) {
            result = (result + a) % N;
        }
        b >>= 1, a = (a << 1) % N;
    }
    return result;
}

ll fpow(ll b, ll p, ll N) {
    ll tmp = b, result = 1;
    while (p) {
        if (p & 1) {
            result = fmul(result, tmp, N);
        }
        p >>= 1, tmp = fmul(tmp, tmp, N);
    }
    return result;
}

bool is_prime(ll n) {
    if (n <= 20) {
        for (ll i : {2, 3, 5, 7, 11, 13, 17, 19})
            if (n == i) return 1;
        return 0;
    } else for (ll i : {2, 3, 5, 7, 11, 13, 17, 19}) {
        if (n % i == 0) return 0;
    }

    if (n < 3) return n == 2;
    ll a = n - 1, b = 0;
    while (a % 2 == 0) a /= 2, ++b;
    for (ll i = 1, j; i <= 16; ++i) {
        ll x = rand() % (n - 2) + 2, v = fpow(x, a, n);
        if (v == 1 || v == n - 1)
            continue;
        for (j = 0; j < b; ++j) {
            v = fmul(v, v, n);
            if (v == n - 1) break;
        }
        if (j >= b) return 0;
    }
    return 1;
}

ll gcd(ll a, ll b) {
    return a ? gcd(b % a, a) : b;
}

ll rho(ll N) {
    while (true) {
        ll c = fmul(rand(), rand(), N - 1) + 1;
        ll l = 2, cnt = 0;
        ll x = 0, y = 0;
        while (true) {
            x = (fmul(x, x, N) + c) % N;
            if (x == y)
                break;
            ll G = gcd(abs(x - y), N);
            if (G == N) break;
            if (G != 1) return G;
            if ((++cnt) == l)
                y = x, l *= 2, cnt = 0;
        }
    }
}

ll rr(ll N) {
    if (is_prime(N)) {
        return 1;
    } else {
        ll R = rho(N);
        return rr(R) + rr(N / R);
    }
}


#define F(X) (#X) << ": " << (X) << ", "

int main() {
    ll t, n, _, N;
    for(cin >> t; t--; ) {
        cerr << F(t) << endl;
        for (cin >> n >> _; n --; ) {
            cin >> N;
            cerr << F(n) << F(_) << F(N) << endl;
            cout << rr(N) << " ";
        }
        cout << endl;
    }
}


```

